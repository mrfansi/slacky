// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - Adapted for NextAuth.js
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  hashedPassword String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // NextAuth.js relations
  accounts       Account[]
  sessions       Session[]
  
  // App relations
  messages       Message[]
  conversations  ConversationParticipant[]
  seenMessages   Message[] @relation("MessageSeenBy")
  reactions      Reaction[] // User's reactions to messages
}

// NextAuth.js required models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Conversation model (for both private and group chats)
model Conversation {
  id            String    @id @default(cuid())
  name          String?   // For group chats
  isGroup       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  messages      Message[]
  participants  ConversationParticipant[]
}

// ConversationParticipant model (Join table for many-to-many between User and Conversation)
model ConversationParticipant {
  id                String       @id @default(cuid())
  userId            String
  conversationId    String
  hasUnreadMessages Boolean      @default(false)
  createdAt         DateTime     @default(now())
  
  // Relations
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  // Unique constraint
  @@unique([userId, conversationId])
}

// Message model
model Message {
  id             String       @id @default(cuid())
  body           String?
  image          String?      // For image messages
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  seenBy         User[]       @relation("MessageSeenBy")
  reactions      Reaction[]   // One-to-many relation with reactions
}

// Reaction model for message reactions
model Reaction {
  id         String   @id @default(cuid())
  emoji      String   // The emoji used for the reaction (e.g., "üëç")
  createdAt  DateTime @default(now())
  
  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId  String
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  // Ensure a user can only react once with the same emoji to a message
  @@unique([userId, messageId, emoji])
}
